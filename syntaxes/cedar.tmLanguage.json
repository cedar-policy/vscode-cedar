{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cedar",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#keywords"
		},	
		{
			"include": "#sections"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#integers"
		},
		{
			"include": "#booleans"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#methods"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#ipmethods"
		},
		{
			"include": "#decimalmethods"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#entities"
		},
		{
			"include": "#namespacedTypes"
		}
	],
	"repository": {
		"comment": {
			"name": "comment.line.double-slash.cedar",
			"match": "//.*(?=$)"
		},
		"annotations": {
			"patterns": [{
				"match": "\\s*([@][_a-zA-Z][_a-zA-Z0-9]*)\\(",
				"captures": {
					"1" : {
						"name": "meta.decorator.cedar"
					}
				}
			}]
		},
		"sections": {
			"patterns": [{
				"name": "keyword.cedar",
				"match": "\\b(?<!\\.)(permit|forbid|when|unless)\\b"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.cedar",
				"match": "\\b(in|has|like|if|then|else|is)\\b",
				"comment": "don't worry about excluding . before reserved identifiers"
			}]
		},
		"variables": {
			"patterns": [{
				"name": "variable.other.cedar",
				"match": "\\?(principal|resource)\\b"
			}]
		},
		"methods": {
			"patterns": [{
				"match": "\\.(contains|containsAll|containsAny)\\(",
				"captures": {
					"1" : {
						"name": "entity.name.function.member.cedar"
					}
				}
			}]
		},
		"functions": {
			"patterns": [{
				"match": "\\b(ip|decimal)\\(",
				"captures": {
					"1" : {
						"name": "support.function.cedar"
					}
				}
			}]
		},
		"ipmethods": {
			"patterns": [{
				"match": "\\.(isIpv4|isIpv6|isLoopback|isMulticast|isInRange)\\(",
				"captures": {
					"1" : {
						"name": "entity.name.function.member.cedar"
					}
				}
			}]
		},
		"decimalmethods": {
			"patterns": [{
				"match": "\\.(lessThan|lessThanOrEqual|greaterThan|greaterThanOrEqual)\\(",
				"captures": {
					"1" : {
						"name": "entity.name.function.member.cedar"
					}
				}
			}]
		},
		"booleans": {
			"patterns": [{
				"name": "constant.language.boolean.cedar",
				"match": "\\b(true|false)\\b",
				"comment": "don't worry about excluding . before reserved identifiers"
			}]
		},
		"integers": {
			"patterns": [{
				"name": "constant.numeric.cedar",
				"match": "\\b([1-9]+[0-9]*|0)\\b"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "variable.other.constant.cedar",
				"match": "\\b(?<!\\.)(principal|action|resource|context)\\b"
			}]
		},
		"entities": {
			"patterns": [{
				"match": "\\b(([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*)(?:::)(?=\")",
				"captures": {
					"1" : {
						"name": "entity.name.type.cedar"
					}
				}
			}]
		},
		"namespacedTypes": {
			"patterns": [{
				"match": "\\b(([_a-zA-Z][_a-zA-Z0-9]*::)+[_a-zA-Z][_a-zA-Z0-9]*)\\b",
				"captures": {
					"1" : {
						"name": "entity.name.type.cedar"
					}
				}
			}]
		},
		"strings": {
			"name": "string.quoted.double.cedar",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cedar",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.cedar"
}